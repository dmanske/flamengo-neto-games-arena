import { useState, useCallback } from 'react';
import { toast } from 'sonner';

export interface TemplateMensagem {
  id: string;
  nome: string;
  emoji: string;
  categoria: 'confirmacao' | 'pagamento' | 'embarque' | 'pos-jogo' | 'geral';
  texto: string;
  preview: string;
  variaveis: string[];
}

// Templates padr√£o do sistema
const TEMPLATES_PADRAO: TemplateMensagem[] = [
  {
    id: 'confirmacao-viagem',
    nome: 'Confirma√ß√£o de Viagem',
    emoji: 'üèÜ',
    categoria: 'confirmacao',
    texto: `Ol√° {nome}! üëã

Confirmamos sua participa√ß√£o na viagem para o jogo:
üî• FLAMENGO x {adversario}
üìÖ Data do jogo: {dataJogo}
üöå Sa√≠da: {dataViagem} √†s {horario}
üìç Local de sa√≠da: {localSaida}

Valor: R$ {valor}
√înibus: {onibus}

Nos vemos l√°! Vamos Flamengo! üî¥‚ö´`,
    preview: 'Ol√° Jo√£o! Confirmamos sua participa√ß√£o na viagem...',
    variaveis: ['nome', 'adversario', 'dataJogo', 'dataViagem', 'horario', 'localSaida', 'valor', 'onibus']
  },
  {
    id: 'lembrete-pagamento',
    nome: 'Lembrete de Pagamento',
    emoji: 'üí∞',
    categoria: 'pagamento',
    texto: `Oi {nome}! 

Lembrando que o prazo para pagamento da viagem do Flamengo est√° chegando:

üéØ Jogo: FLAMENGO x {adversario} 
üìÖ {dataJogo}
üí∞ Valor: R$ {valor}

Por favor, confirme seu pagamento at√© {prazo}.

Qualquer d√∫vida, me chama! üì±`,
    preview: 'Oi Jo√£o! Lembrando que o prazo para pagamento...',
    variaveis: ['nome', 'adversario', 'dataJogo', 'valor', 'prazo']
  },
  {
    id: 'info-embarque',
    nome: 'Informa√ß√µes de Embarque',
    emoji: 'üöå',
    categoria: 'embarque',
    texto: `{nome}, bom dia! ‚òÄÔ∏è

Informa√ß√µes importantes para hoje:
üöå √înibus: {onibus}
‚è∞ Sa√≠da: {horario} em ponto
üìç Local: {localSaida}

‚ö†Ô∏è Chegue 15 min antes!
üéí Leve documento com foto

Vamos juntos torcer pelo Meng√£o! üî¥‚ö´`,
    preview: 'Jo√£o, bom dia! Informa√ß√µes importantes para hoje...',
    variaveis: ['nome', 'onibus', 'horario', 'localSaida']
  },
  {
    id: 'pos-jogo',
    nome: 'P√≥s-Jogo',
    emoji: 'üéâ',
    categoria: 'pos-jogo',
    texto: `E a√≠ {nome}! 

Que jogo foi esse! üî•
Obrigado por estar conosco na torcida pelo Flamengo!

J√° estamos organizando a pr√≥xima viagem.
Quer garantir sua vaga? Me chama! üì±

#SempreFlamengo üî¥‚ö´`,
    preview: 'E a√≠ Jo√£o! Que jogo foi esse! Obrigado por estar...',
    variaveis: ['nome']
  },
  {
    id: 'bom-dia',
    nome: 'Bom Dia Geral',
    emoji: '‚òÄÔ∏è',
    categoria: 'geral',
    texto: `Bom dia, {nome}! ‚òÄÔ∏è

Esperamos que esteja tudo bem com voc√™!

Em breve teremos novidades sobre as pr√≥ximas viagens do Flamengo.

Fique ligado! üî¥‚ö´`,
    preview: 'Bom dia, Jo√£o! Esperamos que esteja tudo bem...',
    variaveis: ['nome']
  },
  {
    id: 'convite-grupo',
    nome: 'Convite para Grupo',
    emoji: 'üë•',
    categoria: 'geral',
    texto: `Oi {nome}! üëã

Voc√™ foi adicionado ao nosso grupo de viagens do Flamengo!

Aqui voc√™ vai receber:
üì¢ Informa√ß√µes das viagens
üéØ Jogos dispon√≠veis
üí¨ Conversar com outros torcedores

Seja bem-vindo(a)! üî¥‚ö´`,
    preview: 'Oi Jo√£o! Voc√™ foi adicionado ao nosso grupo...',
    variaveis: ['nome']
  }
];

export const useTemplatesMensagem = () => {
  const [templates] = useState<TemplateMensagem[]>(TEMPLATES_PADRAO);

  // Fun√ß√£o para substituir vari√°veis no template
  const substituirVariaveis = useCallback((texto: string, dados: Record<string, string>) => {
    let textoFinal = texto;
    
    // Substituir vari√°veis no formato {variavel}
    Object.entries(dados).forEach(([chave, valor]) => {
      const regex = new RegExp(`\\{${chave}\\}`, 'g');
      textoFinal = textoFinal.replace(regex, valor || `{${chave}}`);
    });

    return textoFinal;
  }, []);

  // Fun√ß√£o para copiar texto para clipboard
  const copiarTexto = useCallback(async (texto: string) => {
    try {
      await navigator.clipboard.writeText(texto);
      toast.success('üìã Texto copiado para a √°rea de transfer√™ncia!');
      return true;
    } catch (error) {
      console.error('Erro ao copiar texto:', error);
      toast.error('‚ùå Erro ao copiar texto');
      return false;
    }
  }, []);

  // Fun√ß√£o para colar texto do clipboard
  const colarTexto = useCallback(async (): Promise<string | null> => {
    try {
      const texto = await navigator.clipboard.readText();
      if (texto) {
        toast.success('üì• Texto colado da √°rea de transfer√™ncia!');
        return texto;
      }
      toast.warning('üìã √Årea de transfer√™ncia vazia');
      return null;
    } catch (error) {
      console.error('Erro ao colar texto:', error);
      toast.error('‚ùå Erro ao acessar √°rea de transfer√™ncia');
      return null;
    }
  }, []);

  // Obter templates por categoria
  const getTemplatesPorCategoria = useCallback((categoria?: string) => {
    if (!categoria) return templates;
    return templates.filter(t => t.categoria === categoria);
  }, [templates]);

  // Obter template por ID
  const getTemplatePorId = useCallback((id: string) => {
    return templates.find(t => t.id === id);
  }, [templates]);

  return {
    templates,
    substituirVariaveis,
    copiarTexto,
    colarTexto,
    getTemplatesPorCategoria,
    getTemplatePorId
  };
};